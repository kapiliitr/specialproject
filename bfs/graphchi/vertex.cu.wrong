#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>

using namespace std;

#define CUDA_SAFE_CALL( err ) (safe_call(err, __LINE__))
#define MAX_THREADS_PER_BLOCK 1024

void safe_call(cudaError_t ret, int line)
{
	if(ret!=cudaSuccess)
	{
		printf("Error at line %d : %s\n",line,cudaGetErrorString(ret));
		exit(-1);
	}
}

typedef struct __interval
{
	int start;
	int end;
} interval_t;

typedef struct __edge
{
	int src;
	int dest;
	int val;
} edge_t;
/*
typedef struct __vertex
{
	int val;
	edge_t * inEdges;
	edge_t * outEdges;
} vertex_t;
*/
typedef struct __shard
{
	int numE;
	int * vertices;
	int * vertexEdgeMap;
	edge_t * edges;
} shard_t;
/*
typedef struct __graph
{
	vertex_t * vertices;
} graph_t;

graph_t * load_subgraph(interval_t, vector<edge_t>);
*/
__device__ bool d_over;

__global__ void reset()
{
	d_over = false;
}

__global__ void bfs(const shard_t * shard, int V)
{
	int i,j,t;
	int id = blockDim.x*blockIdx.x + threadIdx.x;
	if(id < V)
	{
		int interval_no = id/blockDim.x;
		int s;
		if(shard[interval_no].vertices[threadIdx.x] == -1)
		{
			int minLevel = INT_MAX;
			for(i=0;i<shard[interval_no].numE;i++)
			{
				if(shard[interval_no].edges[i].dest == id)
				{
					if(id==29918)
						printf("src=%d\n",shard[interval_no].edges[i].src);
					t = shard[interval_no].edges[i].val;
					if(t>=0 && t < minLevel)
					{
						minLevel = t;
					}
				}
			}
			if(minLevel==INT_MAX) { minLevel=-1; }
			if(minLevel >= 0)
			{
				shard[interval_no].vertices[threadIdx.x] = minLevel+1;
				d_over = true;
				for(i=0;i<gridDim.x;i++)
				{
					if(id==0)
						j=0;
					else
						j=shard[i].vertexEdgeMap[id-1];
					for(;j<shard[i].vertexEdgeMap[id];j++)
					{
						shard[i].edges[j].val = minLevel+1;
					}
				}
			}
		}
	}
}

bool cost(const edge_t &a, const edge_t &b)
{
	    //return ((a.src < b.src) || (a.src == b.src && a.dest < b.dest));
	    return (a.src < b.src);
}

int main(int argc, char * argv[])
{
	static char * filename;
	if(argc!=2)
	{
		printf("./a.out <filename>\n");
		exit(-1);
	}
	else
	{
		filename = argv[1];
	}

	FILE * fp = fopen(filename,"r");
	if(!fp)
	{
		printf("Error reading file.\n");
		exit(-1);
	}

	/* Set cuda device to K40  */
	CUDA_SAFE_CALL(cudaSetDevice(0));

	/* Get graph from file into CPU memory  */
	int num_vertices, num_edges, i, j, k;
	fscanf(fp,"%d %d",&num_vertices,&num_edges);

	//Each shard will have MAX_THREADS_PER_BLOCK number of vertices
	int num_of_blocks = 1;
	int num_of_threads_per_block = num_vertices;

	if(num_vertices>MAX_THREADS_PER_BLOCK)
	{
		num_of_blocks = (int)ceil(num_vertices/(double)MAX_THREADS_PER_BLOCK); 
		num_of_threads_per_block = MAX_THREADS_PER_BLOCK; 
	}

	dim3  grid( num_of_blocks, 1, 1);
	dim3  threads( num_of_threads_per_block, 1, 1);

	interval_t * interval = (interval_t *) malloc(num_of_blocks*sizeof(interval_t));
	for(i=0; i<num_of_blocks; i++)
	{
		interval[i].start=i*num_of_threads_per_block;
		int t=(i+1)*num_of_threads_per_block-1;
		interval[i].end=(t > num_vertices) ? num_vertices : t;
	}

	vector< vector<edge_t> > edges(num_of_blocks);
	int s,d;

	for(i=0; i<num_edges; i++)
	{
		fscanf(fp,"%d",&s);
		fscanf(fp,"%d",&d);
		edge_t e;
		e.src=s;
		e.dest=d;
		if(s==0)
			e.val=0;
		else
			e.val=-1;
		edges[(e.dest/num_of_threads_per_block)].push_back(e);
	}

	shard_t * shard;

	CUDA_SAFE_CALL(cudaMallocHost((void **)&shard, num_of_blocks*sizeof(shard_t)));
	for(i=0; i<num_of_blocks; i++)
	{
		CUDA_SAFE_CALL(cudaMallocHost((void **)&shard[i].edges, edges[i].size()*sizeof(edge_t)));
		shard[i].numE = edges[i].size();
		CUDA_SAFE_CALL(cudaMallocHost((void **)&shard[i].vertexEdgeMap, num_vertices*sizeof(int)));
		for(j=0; j<num_vertices; j++)
			shard[i].vertexEdgeMap[j] = 0;
		CUDA_SAFE_CALL(cudaMallocHost((void **)&shard[i].vertices, num_of_threads_per_block*sizeof(int)));
		for(j=0; j<num_of_threads_per_block; j++)
			shard[i].vertices[j] = -1;
	}
	shard[0].vertices[0] = 0;


	for(i=0; i<num_of_blocks; i++)
	{
		sort(edges[i].begin(),edges[i].end(),cost);
		j=0;
		for (vector<edge_t>::iterator it = edges[i].begin() ; it != edges[i].end(); ++it)
		{
			shard[i].edges[j] = (*it);
			shard[i].vertexEdgeMap[(*it).src] += 1;
			j++;
		}
		for(j=1; j<num_vertices; j++)
			shard[i].vertexEdgeMap[j] += shard[i].vertexEdgeMap[j-1];
	}
/*	
	for(i = 0; i < num_of_blocks; i++)
	{
		for(j = 0; j < shard[i].numE; j++)
		printf("%d %d\n",shard[i].edges[j].src,shard[i].edges[j].dest);
	}
*/

	cudaEvent_t start,end;
	float diff;
	double time = 0;

	CUDA_SAFE_CALL(cudaEventCreate(&start));
	CUDA_SAFE_CALL(cudaEventCreate(&end));

	bool stop;
	k=0;
	do
	{
		stop = false;
		CUDA_SAFE_CALL(cudaMemcpyToSymbol(d_over, &stop, sizeof(bool),0, cudaMemcpyHostToDevice));
		CUDA_SAFE_CALL(cudaDeviceSynchronize());

		CUDA_SAFE_CALL(cudaEventRecord(start,0));
	
		bfs<<<grid, threads>>> (shard, num_vertices);

		CUDA_SAFE_CALL(cudaDeviceSynchronize());
		CUDA_SAFE_CALL(cudaEventRecord(end,0));
		CUDA_SAFE_CALL(cudaEventSynchronize(end));
		CUDA_SAFE_CALL(cudaEventElapsedTime(&diff, start, end));
		time += diff*1.0e-3;

		CUDA_SAFE_CALL(cudaMemcpyFromSymbol(&stop, d_over, sizeof(bool),0, cudaMemcpyDeviceToHost));
		k++;
	}while(stop);

	printf("Number of iterations : %d\n",k);
	for(i = 0; i < num_of_blocks; i++)
	{
		for(j = 0; j < num_of_threads_per_block; j++)
		{
			k=i*num_of_threads_per_block+j;
			if(k<num_vertices)
				printf("Vertex %d Distance %d\n",k,shard[i].vertices[j]);
		}
	}
	printf("Time: %f ms\n",time);

	CUDA_SAFE_CALL(cudaEventDestroy(start));
	CUDA_SAFE_CALL(cudaEventDestroy(end));

	return 0;
}
/*
graph_t * load_subgraph(interval_t interval, vector<edge_t> edges)
{
	int a = interval.start;
	int b = interval.end;

	graph_t * G = (graph_t *) malloc(sizeof(graph_t));
	vertex_t * vertices = (vertex_t *) malloc((b-a+1)*sizeof(vertex_t));
	G->vertices = vertices;
	


	return G;
}
*/
